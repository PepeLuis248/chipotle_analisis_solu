# -*- coding: utf-8 -*-
"""chipotle_analisis_solu.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A2-_U-cjj0OCGSO4rmarOmwqrzbzT9SH

# Análisis de ventas - Chipotle

El Chipotle es un chile jalapeño maduro que ha sido secado y ahumado, en otros paises el Chipotle son los Pimientos con sabor ahumado con un dulzor suave

Este notebook realiza un análisis exploratorio de un dataset real de ventas en Chipotle.

Incluye:
- Limpieza de datos
- Análisis de ingredientes
- Visualizaciones
- Ejercicios prácticos al final
"""

# Cargar librerías necesarias
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style='whitegrid')

"""## 1. Carga del archivo chipotle.tsv

###Pandas no tiene una función read_tsv().
Solución correcta:

Use read_csv() con el parámetro sep='\t', que es lo que distingue un archivo TSV (Tab Separated Values):

ventas = pd.read_csv('/content/chipotle.tsv', sep='\t')


Explicación breve:
    
    • read_csv() es una función genérica para leer archivos delimitados.
   
    • sep='\t' le dice a pandas que las columnas están separadas por tabulaciones (TSV).
"""

# Cargar el archivo
ventas = pd.read_csv('chipotle.tsv', sep='\t')
ventas.head()

ventas

#Estructura general del dataset
ventas.info()

#Buscar valores nulos
ventas.isnull().sum()

#Ver las columnas únicas y su tipo
ventas.dtypes

"""## 2. Limpieza de columnas"""

# Limpiar la columna de precios, convierte la columna en float, elimina los NAN
ventas['item_price'] = ventas['item_price'].replace('[\$,]', '', regex=True).astype(float)

# Limpiar y convertir choice_description en listas
ventas['ingredientes'] = ventas['choice_description'].dropna().apply(
    lambda x: x.replace('[', '').replace(']', '').split(', ')
)

#Estadísticas rápidas (sólo columnas numéricas)
ventas.describe()

ventas

#Elimina la columna choice_description ya normalizada
ventas = ventas.drop(['choice_description'], axis=1)
ventas.info()

"""## 3. Ingredientes más comunes"""

# Explode de ingredientes, elimina los NAN, Explode: convierte las listas en filas
ingredientes_explotados = ventas[['order_id', 'ingredientes']].explode('ingredientes').dropna()

# Conteo
conteo_ingredientes = ingredientes_explotados['ingredientes'].value_counts().head(10)

# Gráfico
plt.figure(figsize=(10, 5))
sns.barplot(x=conteo_ingredientes.values, y=conteo_ingredientes.index, hue=conteo_ingredientes.index, palette='viridis',legend=False)
plt.title('Top 10 Ingredientes más comunes')
plt.xlabel('Frecuencia')
plt.ylabel('Ingrediente')
plt.tight_layout()
plt.show()

"""## 4. Productos más vendidos"""

# Top productos
top_productos = ventas['item_name'].value_counts().head(10)

# Gráfico
plt.figure(figsize=(10, 5))
#sns.barplot(x=top_productos.values, y=top_productos.index, palette='magma')
sns.barplot(x=top_productos.values, y=top_productos.index, hue=top_productos.index, palette='magma', legend=False)
plt.title('Top 10 Productos más vendidos')
plt.xlabel('Cantidad de ventas')
plt.ylabel('Producto')
plt.tight_layout()
plt.show()

"""## 5. Precio promedio por producto"""

precio_promedio = ventas.groupby('item_name')['item_price'].mean().loc[top_productos.index]

# Gráfico
plt.figure(figsize=(10, 5))
sns.barplot(x=precio_promedio.values, y=precio_promedio.index,hue=precio_promedio.index, palette='coolwarm',legend=False)
plt.title('Precio promedio de los productos más vendidos')
plt.xlabel('Precio promedio ($)')
plt.ylabel('Producto')
plt.tight_layout()
plt.show()

"""## 6. Ejercicios propuestos

1. ¿Cuál es el precio total generado por cada producto (`item_name`)?
2. ¿Qué producto genera más ingresos en total?
3. ¿Cuál es el número total de órdenes únicas?
4. ¿Cuántos ingredientes distintos hay en total?
5. **Bonus:** Graficar la distribución del precio total por orden (usando `groupby` + `sum`).

Intentá resolverlos usando `groupby`, `sum`, `nunique`, `value_counts`, y `plot()`.

### Ejercicio 1: Precio total por producto
"""

# Precio total generado por cada producto
total_por_producto = ventas.groupby('item_name')['item_price'].sum().sort_values(ascending=False)
total_por_producto.head(10)

"""### Ejercicio 2: Producto que más ingresos genera"""

# Producto que más ingresos genera
producto_top = total_por_producto.idxmax()
ingreso_top = total_por_producto.max()
print(f"El producto que más ingresos genera es '{producto_top}' con un total de ${ingreso_top:.2f}")

"""### Ejercicio 3: Número total de órdenes únicas"""

# Número total de órdenes únicas
ordenes_unicas = ventas['order_id'].nunique()
print(f"Hay un total de {ordenes_unicas} órdenes únicas.")

"""### Ejercicio 4: Ingredientes distintos en total"""

# Ingredientes únicos
ingredientes_unicos = ingredientes_explotados['ingredientes'].nunique()
print(f"Hay un total de {ingredientes_unicos} ingredientes distintos.")

"""### Ejercicio Bonus: Distribución del precio total por orden"""

# Precio total por orden
precio_por_orden = ventas.groupby('order_id')['item_price'].sum()

# Histograma
plt.figure(figsize=(8, 5))
sns.histplot(precio_por_orden, bins=30, color='skyblue', kde=True)
plt.title('Distribución del precio total por orden')
plt.xlabel('Total de la orden ($)')
plt.ylabel('Cantidad de órdenes')
plt.tight_layout()
plt.show()

"""### Bonus Extra: Ingresos totales por producto (visual)"""

# Top ingresos por producto
top_ingresos = total_por_producto.head(10)

# Gráfico
plt.figure(figsize=(10, 5))
sns.barplot(x=top_ingresos.values, y=top_ingresos.index, hue=top_ingresos.index, palette='cividis',legend=False)
plt.title('Top 10 productos por ingreso total')
plt.xlabel('Ingreso total ($)')
plt.ylabel('Producto')
plt.tight_layout()
plt.show()

